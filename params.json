{"name":"Puppet-percona","tagline":"Puppet module for Percona.","body":"# Puppet Percona\r\n\r\nInstall a percona (mysql) server and manage users/rights/databases.\r\n\r\n## Requirements\r\n\r\n### Debian/Ubuntu\r\n* [Camptocamp apt module]\r\nor \r\n* [Puppetlabs apt module]\r\n\r\n## Basic usage\r\n\r\n### Client only\r\n\r\n```puppet\r\n  class { 'apt': }\r\n  class { 'percona': }\r\n\r\n  Class['apt'] ->\r\n  Class['percona']\r\n```\r\n\r\n### Client and server\r\n\r\n```puppet\r\n    class { 'apt': }\r\n    class { 'percona': server => true, }\r\n\r\n    Class['apt'] ->\r\n    Class['percona']\r\n```\r\n\r\n### Configuration\r\n\r\n\r\n#### Using percona hashes\r\n\r\nTo make sure we allow maximal flexibility while using this module, you can now\r\nspecify my.cnf options using a hash. You can do so in 2 different places:\r\n\r\nYou can specify the default_configuration parameter on percona::params and/or\r\nyou can specify the configuration parameter on percona.\r\nWhy can you use 2 different places?\r\n\r\nYou can use percona::params to set options globally over your complete\r\ninfrastructure and all hosts connected to it. You can do so by defining it\r\noutside the scope of your node (a defaults.pp or a class that is included on\r\nevery node, ...). Then, you could overwrite these global options for each\r\nserver specifically when you define the percona resource.\r\n\r\nNot enough possibilities? Store your configuration in hiera and directly\r\nuse the hash returned by the hiera function and pass it through. This allows\r\nyou to specify the configuration of your server on pretty much any level\r\nyou want.\r\n\r\nHow do these hashes look like? The (nested) hash you pass to percona::params\r\nshould look like this:\r\n\r\n```puppet\r\n\r\n    $hash = {\r\n      '5.1'    => {\r\n        'mysqld/option' => '5.1 specific value',\r\n      },\r\n      '5.5'    => {\r\n        'mysqld/option'  => '5.5 specific value',\r\n        'mysqld/option2' => 'only exists in 5.5'\r\n      },\r\n      'global' => {\r\n        'mysqld/global'     => 'global option that works for any percona version',\r\n        'xtrabackup/global' => 'global option in the xtrabackup section'\r\n      },\r\n    }\r\n    class {'percona::params':\r\n      default_configuration => $hash,\r\n    }\r\n\r\n```\r\n\r\nFor options that get passed to percona using the configuration parameter, you\r\ndo not need to nest the parameters since you will have picked the percona\r\nversion to use at this point.\r\n\r\n```puppet\r\n\r\n  $configuration = {\r\n    'mysqld/option' => 'something',\r\n    'mysqld/option2' => { 'ensure' => 'absent' },\r\n  }\r\n  class {'percona':\r\n    percona_version => '5.5',\r\n    configuration   => $configuration,\r\n  }\r\n\r\n\r\n```\r\n----\r\n\r\nFor more information on the structures you can use, please see the docs of the\r\npercona_hash_merge() function.\r\n\r\nAn example hiera.yaml file:\r\n\r\n```yaml\r\n\r\npercona_config_global:\r\n  5.5:\r\n    character-set-server: utf8\r\n\r\n  5.1:\r\n    default-character-set: utf8\r\n\r\n  global:\r\n    thread_concurrency: %{processorcount}\r\n    default-storage-engine: 'InnoDB'\r\n\r\n```\r\n\r\nand in your manifests\r\n\r\n```puppet\r\n\r\n  class {'percona::params':\r\n    default_configuration => hiera('percona_config_global', undef),\r\n  }\r\n\r\n  include percona\r\n\r\n```\r\n\r\n#### Using percona::conf\r\n\r\nBefore being able to use percona::conf, you should set the config_include_dir\r\nparameter. You can do this in percona::params or when calling percona.\r\n\r\nFor debian users, the config_include_dir has been defaulted to /etc/mysql/conf.d/\r\n\r\n```puppet\r\n\r\n    # This will create a file in the config_folder for each entry.\r\n    percona::conf {\r\n      'innodb_file_per_table': content => \"[mysqld]\\ninnodb_file_per_table\";\r\n      'query_cache_size':      content => \"[mysqld]\\nquery_cache_size = 32M\";\r\n      'table_open_cache':      content => \"[mysqld]\\ntable_open_cache = 768\";\r\n\r\n      'foo':\r\n        ensure  => present,\r\n        content => template (\"percona/custom1.cnf.erb\");\r\n      'bar':\r\n        ensure  => absent,\r\n        content => template (\"percona/custom2.cnf.erb\");\r\n    }\r\n\r\n```\r\n\r\n### Databases and permissions.\r\n\r\n```puppet\r\n\r\n    percona::database { 'dbfoo':\r\n      ensure => present;\r\n    }\r\n\r\n    percona::rights {'userbar on dbfoo':\r\n      priv => 'select_priv',\r\n      host => 'localhost',\r\n      database => '*'\r\n      password => 'default',\r\n    }\r\n\r\n    # You can ommit the user, host and database parameter if you use this format:\r\n    percona::rights {'user@localhost/dbname':\r\n      priv => 'all'\r\n    }\r\n\r\n```\r\n\r\n### Unit testing\r\n\r\nUnit testing is done using [rspec-puppet]:\r\n\r\n    # bundle && bundle exec rspec\r\n\r\n[camptocamp apt module]: https://github.com/camptocamp/puppet-apt\r\n[Puppetlabs apt module]: https://github.com/puppetlabs/puppetlabs-apt\r\n[rspec-puppet]: https://github.com/rodjek/rspec-puppet\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}